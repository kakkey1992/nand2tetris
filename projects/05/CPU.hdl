// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //decode the instruction
    And(a=instruction[15], b=true, out=InstC);
    Not(in=InstC, out=InstA);
    And(a=instruction[12], b=InstC, out=isM);
    And(a=instruction[11], b=InstC, out=czx);
    And(a=instruction[10], b=InstC, out=cnx);
    And(a=instruction[9], b=InstC, out=czy);
    And(a=instruction[8], b=InstC, out=cny);
    And(a=instruction[7], b=InstC, out=cf);
    And(a=instruction[6], b=InstC, out=cno);
    And(a=instruction[5], b=InstC, out=writeA);
    And(a=instruction[4], b=InstC, out=writeD);
    And(a=instruction[3], b=InstC, out=writeM);
    And(a=instruction[2], b=InstC, out=jng);
    And(a=instruction[1], b=InstC, out=jzr);
    And(a=instruction[0], b=InstC, out=jpos);

    //A-register condition
    Or(a=InstA, b=writeA, out=writeAorInstA);
    Mux16(a=loop, b=instruction, sel=InstA, out=inA);
    ARegister(in=inA, load=writeAorInstA, out=outA, out[0..14]=addressM);
    
    //ALU input and calculation
    DRegister(in=loop, load=writeD, out=outD);
    Mux16(a=outA, b=inM, sel=isM, out=outAM);
    ALU(x=outD, y=outAM, zx=czx, nx=cnx, zy=czy, ny=cny, f=cf, no=cno, out=loop, out=outM, zr=zr, ng=ng);

    //makejumpflag
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notng, b=notzr, out=pos);
    And(a=jng, b=ng, out=tmpng);
    And(a=jzr, b=zr, out=tmpzr);
    And(a=jpos, b=pos, out=tmppos);
    Or(a=tmpng, b=tmpzr, out=tmp1);
    Or(a=tmp1, b=tmppos, out=jumpflag);

    PC(in=outA, inc=true, load=jumpflag, reset=reset, out[0..14]=pc);
    
}
